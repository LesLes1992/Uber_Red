<!DOCTYPE html>
<html>
  <head>
    <title>UberRed</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_include_tag "application", "data-turbo-track": "reload", defer: true %>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places"></script>
    <script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.
      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initialize() {
        // Create the autocomplete object, restricting the search
        // to geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {HTMLInputElement} */(document.getElementById('autocomplete')),
            { types: ['geocode'] });
        // When the user selects an address from the dropdown,
        // populate the address fields in the form.
        google.maps.event.addListener(autocomplete, 'place_changed', function() {
          fillInAddress();
        });
      }

      // [START region_fillform]
      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }
      // [END region_fillform]

      // [START region_geolocation]
      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = new google.maps.LatLng(
                position.coords.latitude, position.coords.longitude);
            autocomplete.setBounds(new google.maps.LatLngBounds(geolocation,
                geolocation));
          });
        }
      }
      // [END region_geolocation]

    </script>
    
  </head>
  <body>
    <nav class="navbar navbar-expand-md navbar-light bg-light">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">UberRed</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav me-auto mb-2 mb-md-0">
            <li class="nav-item">
              <%= link_to 'Home', root_path, class: 'nav-link' %>
            </li>
            <% if (user_signed_in?) && (current_user.has_role? :traveler)%>
              <li class="nav-item">
                <%= link_to 'Order list', orders_path, class: 'nav-link' %>
              </li>
            <% end %>

            <% if (user_signed_in?) && (current_user.has_role? :traveler)%>
              <li class="nav-item">
                  <%= button_to "To be a driver", user_role_path, class: 'btn btn-outline-secondary', method: :post, params: {role: :driver },form: { data: { turbo_confirm: "Are you sure you want to change to be a driver ?" } }  %>
              </li>
            <% end %>

            <% if (user_signed_in?) && (current_user.has_role? :driver)%>
              <li class="nav-item">
                  <%= button_to "To be a traveler", user_role_path, class: 'btn btn-outline-secondary', method: :post, params: {role: :traveler},form: { data: { turbo_confirm: "Are you sure you want to change to be a trave?" } }  %>
              </li>
            <% end %>
            
          </ul>
          <% if user_signed_in? %>
              <div class="ml-auto btn-toolbar p-3">
                Welcome, <%= current_user.email%>
              </div>
              <div class="ml-auto btn-toolbar"> 
              <%= button_to 'Log Out', destroy_user_session_path, class: 'btn btn-outline-warning', method: :delete, form: { data: { turbo_confirm: "Are you sure you want to log out #{current_user.email} ?" } } %>
              </div>
          <% else %>
              <div class="ml-auto btn-toolbar p-3">
                <%= link_to "Sign up", new_user_registration_path,class: 'btn btn-outline-secondary' %>
              </div>
              <div class="ml-auto btn-toolbar"> 
              <%= link_to 'Log in', new_user_session_path, class: 'btn btn-outline-primary' %>
              </div>
          <% end %>
        </div>
      </div>
    </nav>
    <main class="p-3">
      <% if notice %>
        <p class="alert alert-info notice" role="alert"><%= notice %></p>
      <% end %>
      <% if alert %>
        <p class="alert alert-danger" role="alert"><%= alert %></p>
      <% end %>
      <%= yield %>
    </main>
  </body>
</html>
